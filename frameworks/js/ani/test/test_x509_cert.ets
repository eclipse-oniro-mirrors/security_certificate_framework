/*
 * Copyright (c) 2025-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { BusinessError } from "@ohos.base";
import cert from "@ohos.security.cert";
import utils from "./test_utils";

let certData = '-----BEGIN CERTIFICATE-----\n' +
  'MIIEAjCCA2ugAwIBAgIUIDIjaNiDndWX97FsVv+AxsugJNwwDQYJKoZIhvcNAQEL\n' +
  'BQAwaTELMAkGA1UEBhMCQ04xEDAOBgNVBAgMB3NoYWFueGkxDjAMBgNVBAcMBXhp\n' +
  'J2FuMQ8wDQYDVQQKDAZIdWF3ZWkxDTALBgNVBAsMBGRlbW8xGDAWBgNVBAMMD3Rl\n' +
  'c3QuaHVhd2VpLmNvbTAeFw0yNTA2MTgwMjE4MzZaFw0zNTA2MTYwMjE4MzZaMGkx\n' +
  'CzAJBgNVBAYTAkNOMRAwDgYDVQQIDAdzaGFhbnhpMQ4wDAYDVQQHDAV4aSdhbjEP\n' +
  'MA0GA1UECgwGSHVhd2VpMQ0wCwYDVQQLDARkZW1vMRgwFgYDVQQDDA90ZXN0Lmh1\n' +
  'YXdlaS5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKuqfzD2/AOoWOhM\n' +
  'pXAR4yCsJZHoUxNSIJsXk8vgTYbPhToOjPdcyUxrnS5OtDqRhPGCKEoVpzcGsccQ\n' +
  '0S9WUuBJwSNkSSO+Iry8l7ndm0hjuwPpLV9yczzoogL4zbdDVeS3yPI5+bcpzEX8\n' +
  'ENAONMoFvq4ypXzV9lvYuTvndCdXAgMBAAGjggGlMIIBoTAdBgNVHQ4EFgQU7B3s\n' +
  't4xLJaIOB8tdpDfSk2t/wIwwHwYDVR0jBBgwFoAU7B3st4xLJaIOB8tdpDfSk2t/\n' +
  'wIwwFQYDVR0TAQH/BAswCQEB/wIEf////TAOBgNVHQ8BAf8EBAMCAYYwJwYDVR0l\n' +
  'BCAwHgYIKwYBBQUHAwEGCCsGAQUFBwMCBggrBgEFBQcDCTBTBgNVHREETDBKggtl\n' +
  'eGFtcGxlLmNvbYIPd3d3LmV4YW1wbGUuY29thipodHRwOi8vY2EuZXhhbXBsZS5j\n' +
  'b20vY3JsL2ludGVybWVkaWF0ZS5jcmwwUwYDVR0SBEwwSoILZXhhbXBsZS5jb22C\n' +
  'D3d3dy5leGFtcGxlLmNvbYYqaHR0cDovL2NhLmV4YW1wbGUuY29tL2NybC9pbnRl\n' +
  'cm1lZGlhdGUuY3JsMGUGA1UdHwReMFwwEaAPoA2CC2V4YW1wbGUuY29tMBWgE6AR\n' +
  'gg93d3cuZXhhbXBsZS5jb20wMKAuoCyGKmh0dHA6Ly9jYS5leGFtcGxlLmNvbS9j\n' +
  'cmwvaW50ZXJtZWRpYXRlLmNybDANBgkqhkiG9w0BAQsFAAOBgQCWB/5V5B7MfX5e\n' +
  'U57rKSuATHo17bntiQZIZBhNSYd7ujxo+KLDVBz8pFwP1MgMmAgl7B35PIfeYXSi\n' +
  'CW7boNow2mPOr4d1PSkL0IuqHBt8SHY0d9UVp0Xp6963dfHaM9NM607dIbDBuP5U\n' +
  'E4PN8uQwR+YAP13TMltSneOZcWpegA==\n' +
  '-----END CERTIFICATE-----\n';

let certDataDER = [
  0x30, 0x82, 0x03, 0x4c, 0x30, 0x82, 0x02, 0x34, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x06, 0x20,
  0x06, 0x05, 0x16, 0x70, 0x02, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01,
  0x01, 0x05, 0x05, 0x00, 0x30, 0x3b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
  0x02, 0x52, 0x4f, 0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x08, 0x63, 0x65,
  0x72, 0x74, 0x53, 0x49, 0x47, 0x4e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13,
  0x10, 0x63, 0x65, 0x72, 0x74, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x52, 0x4f, 0x4f, 0x54, 0x20, 0x43,
  0x41, 0x30, 0x1e, 0x17, 0x0d, 0x30, 0x36, 0x30, 0x37, 0x30, 0x34, 0x31, 0x37, 0x32, 0x30, 0x30,
  0x34, 0x5a, 0x17, 0x0d, 0x33, 0x31, 0x30, 0x37, 0x30, 0x34, 0x31, 0x37, 0x32, 0x30, 0x30, 0x34,
  0x5a, 0x30, 0x3b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x52, 0x4f,
  0x31, 0x11, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x08, 0x63, 0x65, 0x72, 0x74, 0x53,
  0x49, 0x47, 0x4e, 0x31, 0x19, 0x30, 0x17, 0x06, 0x03, 0x55, 0x04, 0x0b, 0x13, 0x10, 0x63, 0x65,
  0x72, 0x74, 0x53, 0x49, 0x47, 0x4e, 0x20, 0x52, 0x4f, 0x4f, 0x54, 0x20, 0x43, 0x41, 0x30, 0x82,
  0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05,
  0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xb7,
  0x33, 0xb9, 0x7e, 0xc8, 0x25, 0x4a, 0x8e, 0xb5, 0xdb, 0xb4, 0x28, 0x1b, 0xaa, 0x57, 0x90, 0xe8,
  0xd1, 0x22, 0xd3, 0x64, 0xba, 0xd3, 0x93, 0xe8, 0xd4, 0xac, 0x86, 0x61, 0x40, 0x6a, 0x60, 0x57,
  0x68, 0x54, 0x84, 0x4d, 0xbc, 0x6a, 0x54, 0x02, 0x05, 0xff, 0xdf, 0x9b, 0x9a, 0x2a, 0xae, 0x5d,
  0x07, 0x8f, 0x4a, 0xc3, 0x28, 0x7f, 0xef, 0xfb, 0x2b, 0xfa, 0x79, 0xf1, 0xc7, 0xad, 0xf0, 0x10,
  0x53, 0x24, 0x90, 0x8b, 0x66, 0xc9, 0xa8, 0x88, 0xab, 0xaf, 0x5a, 0xa3, 0x00, 0xe9, 0xbe, 0xba,
  0x46, 0xee, 0x5b, 0x73, 0x7b, 0x2c, 0x17, 0x82, 0x81, 0x5e, 0x62, 0x2c, 0xa1, 0x02, 0x65, 0xb3,
  0xbd, 0xc5, 0x2b, 0x00, 0x7e, 0xc4, 0xfc, 0x03, 0x33, 0x57, 0x0d, 0xed, 0xe2, 0xfa, 0xce, 0x5d,
  0x45, 0xd6, 0x38, 0xcd, 0x35, 0xb6, 0xb2, 0xc1, 0xd0, 0x9c, 0x81, 0x4a, 0xaa, 0xe4, 0xb2, 0x01,
  0x5c, 0x1d, 0x8f, 0x5f, 0x99, 0xc4, 0xb1, 0xad, 0xdb, 0x88, 0x21, 0xeb, 0x90, 0x08, 0x82, 0x80,
  0xf3, 0x30, 0xa3, 0x43, 0xe6, 0x90, 0x82, 0xae, 0x55, 0x28, 0x49, 0xed, 0x5b, 0xd7, 0xa9, 0x10,
  0x38, 0x0e, 0xfe, 0x8f, 0x4c, 0x5b, 0x9b, 0x46, 0xea, 0x41, 0xf5, 0xb0, 0x08, 0x74, 0xc3, 0xd0,
  0x88, 0x33, 0xb6, 0x7c, 0xd7, 0x74, 0xdf, 0xdc, 0x84, 0xd1, 0x43, 0x0e, 0x75, 0x39, 0xa1, 0x25,
  0x40, 0x28, 0xea, 0x78, 0xcb, 0x0e, 0x2c, 0x2e, 0x39, 0x9d, 0x8c, 0x8b, 0x6e, 0x16, 0x1c, 0x2f,
  0x26, 0x82, 0x10, 0xe2, 0xe3, 0x65, 0x94, 0x0a, 0x04, 0xc0, 0x5e, 0xf7, 0x5d, 0x5b, 0xf8, 0x10,
  0xe2, 0xd0, 0xba, 0x7a, 0x4b, 0xfb, 0xde, 0x37, 0x00, 0x00, 0x1a, 0x5b, 0x28, 0xe3, 0xd2, 0x9c,
  0x73, 0x3e, 0x32, 0x87, 0x98, 0xa1, 0xc9, 0x51, 0x2f, 0xd7, 0xde, 0xac, 0x33, 0xb3, 0x4f, 0x02,
  0x03, 0x01, 0x00, 0x01, 0xa1, 0x08, 0x03, 0x06, 0x01, 0x01, 0x00, 0x4d, 0x57, 0x12, 0xa2, 0x08,
  0x03, 0x06, 0x01, 0x02, 0x03, 0x4d, 0x57, 0x12, 0xa3, 0x42, 0x30, 0x40, 0x30, 0x0f, 0x06, 0x03,
  0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x0e, 0x06,
  0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x01, 0xc6, 0x30, 0x1d, 0x06,
  0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xe0, 0x8c, 0x9b, 0xdb, 0x25, 0x49, 0xb3, 0xf1,
  0x7c, 0x86, 0xd6, 0xb2, 0x42, 0x87, 0x0b, 0xd0, 0x6b, 0xa0, 0xd9, 0xe4, 0x30, 0x0d, 0x06, 0x09,
  0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00,
  0x3e, 0xd2, 0x1c, 0x89, 0x2e, 0x35, 0xfc, 0xf8, 0x75, 0xdd, 0xe6, 0x7f, 0x65, 0x88, 0xf4, 0x72,
  0x4c, 0xc9, 0x2c, 0xd7, 0x32, 0x4e, 0xf3, 0xdd, 0x19, 0x79, 0x47, 0xbd, 0x8e, 0x3b, 0x5b, 0x93,
  0x0f, 0x50, 0x49, 0x24, 0x13, 0x6b, 0x14, 0x06, 0x72, 0xef, 0x09, 0xd3, 0xa1, 0xa1, 0xe3, 0x40,
  0x84, 0xc9, 0xe7, 0x18, 0x32, 0x74, 0x3c, 0x48, 0x6e, 0x0f, 0x9f, 0x4b, 0xd4, 0xf7, 0x1e, 0xd3,
  0x93, 0x86, 0x64, 0x54, 0x97, 0x63, 0x72, 0x50, 0xd5, 0x55, 0xcf, 0xfa, 0x20, 0x93, 0x02, 0xa2,
  0x9b, 0xc3, 0x23, 0x93, 0x4e, 0x16, 0x55, 0x76, 0xa0, 0x70, 0x79, 0x6d, 0xcd, 0x21, 0x1f, 0xcf,
  0x2f, 0x2d, 0xbc, 0x19, 0xe3, 0x88, 0x31, 0xf8, 0x59, 0x1a, 0x81, 0x09, 0xc8, 0x97, 0xa6, 0x74,
  0xc7, 0x60, 0xc4, 0x5b, 0xcc, 0x57, 0x8e, 0xb2, 0x75, 0xfd, 0x1b, 0x02, 0x09, 0xdb, 0x59, 0x6f,
  0x72, 0x93, 0x69, 0xf7, 0x31, 0x41, 0xd6, 0x88, 0x38, 0xbf, 0x87, 0xb2, 0xbd, 0x16, 0x79, 0xf9,
  0xaa, 0xe4, 0xbe, 0x88, 0x25, 0xdd, 0x61, 0x27, 0x23, 0x1c, 0xb5, 0x31, 0x07, 0x04, 0x36, 0xb4,
  0x1a, 0x90, 0xbd, 0xa0, 0x74, 0x71, 0x50, 0x89, 0x6d, 0xbc, 0x14, 0xe3, 0x0f, 0x86, 0xae, 0xf1,
  0xab, 0x3e, 0xc7, 0xa0, 0x09, 0xcc, 0xa3, 0x48, 0xd1, 0xe0, 0xdb, 0x64, 0xe7, 0x92, 0xb5, 0xcf,
  0xaf, 0x72, 0x43, 0x70, 0x8b, 0xf9, 0xc3, 0x84, 0x3c, 0x13, 0xaa, 0x7e, 0x92, 0x9b, 0x57, 0x53,
  0x93, 0xfa, 0x70, 0xc2, 0x91, 0x0e, 0x31, 0xf9, 0x9b, 0x67, 0x5d, 0xe9, 0x96, 0x38, 0x5e, 0x5f,
  0xb3, 0x73, 0x4e, 0x88, 0x15, 0x67, 0xde, 0x9e, 0x76, 0x10, 0x62, 0x20, 0xbe, 0x55, 0x69, 0x95,
  0x43, 0x00, 0x39, 0x4d, 0xf6, 0xee, 0xb0, 0x5a, 0x4e, 0x49, 0x44, 0x54, 0x58, 0x5f, 0x42, 0x83,
];

function createX509Cert(
    data: Uint8Array = utils.stringToUint8Array(certData),
    encodingFormat: cert.EncodingFormat = cert.EncodingFormat.FORMAT_PEM
  ) {
  let encodingBlob: cert.EncodingBlob = {
    data: data,
    encodingFormat: encodingFormat
  };
  let x509Cert = await cert.createX509Cert(encodingBlob);
  return x509Cert;
}

function testX509CertAsync() {
  try {
    let x509Cert = createX509Cert();
    let pubKey = x509Cert.getPublicKey();
    let pkBlob = pubKey.getEncoded();
    let pkStr = utils.uint8ArrayToHexStr(pkBlob.data);
    console.println("X509Cert pubKey: " + pkStr);
    let encoded = await  x509Cert.getEncoded();
    let certStr = utils.uint8ArrayToHexStr(encoded.data);
    console.println("X509Cert encoded.data: " + certStr);
    console.println("X509Cert encoded.encodingFormat: " + encoded.encodingFormat);
  } catch (err: BusinessError) {
    console.println(`[error] X509Cert: ${err.code} ${err.message}`);
  }
}

function testX509CertVerify() {
  try {
    let x509Cert = createX509Cert();
    let pubKey = x509Cert.getPublicKey();
    await x509Cert.verify(pubKey);
    console.println("X509Cert verify success");
  } catch (err: BusinessError) {
    console.println(`[error] verify: ${err.code} ${err.message}`);
  }
}

function testX509CertCheckValidityWithDate() {
  try {
    let x509Cert = createX509Cert();
    let date = '250618021836Z';
    x509Cert.checkValidityWithDate(date);
    console.println("X509Cert checkValidityWithDate success");
  } catch (err: BusinessError) {
    console.println(`[error] checkValidityWithDate: ${err.code} ${err.message}`);
  }
}

function testX509CertGetCertData() {
  try {
    let x509Cert = createX509Cert();
    let version = x509Cert.getVersion();
    console.println("X509Cert version: " + version);
    let serialNumber = x509Cert.getCertSerialNumber();
    console.println("X509Cert serialNumber: " + serialNumber);
    let issuerName = x509Cert.getIssuerName();
    console.println("X509Cert issuerName: " + issuerName.data);
    let subjectName = x509Cert.getSubjectName(cert.EncodingType.ENCODING_UTF8);
    console.println("X509Cert subjectName: " + subjectName.data);
    let notBeforeTime = x509Cert.getNotBeforeTime();
    console.println("X509Cert notBeforeTime: " + notBeforeTime);
    let notAfterTime = x509Cert.getNotAfterTime();
    console.println("X509Cert notAfterTime: " + notAfterTime);
    let signature = x509Cert.getSignature();
    console.println("X509Cert signature: " + signature.data);
    let signatureAlgName = x509Cert.getSignatureAlgName();
    console.println("X509Cert signatureAlgName: " + signatureAlgName);
    let signatureAlgOid = x509Cert.getSignatureAlgOid();
    console.println("X509Cert signatureAlgOid: " + signatureAlgOid);
    let signatureAlgParams = x509Cert.getSignatureAlgParams();
    console.println("X509Cert signatureAlgParams: " + signatureAlgParams.data);
  } catch (err: BusinessError) {
    console.println(`[error] cert data: ${err.code} ${err.message}`);
  }
}

function testX509CertGetCertData2() {
  try {
    let x509Cert = createX509Cert();
    let keyUsage = x509Cert.getKeyUsage();
    console.println("X509Cert keyUsage: " + keyUsage.data);
    let extKeyUsage = x509Cert.getExtKeyUsage();
    console.println("X509Cert extKeyUsage: " + extKeyUsage.data);
    let basicConstraints = x509Cert.getBasicConstraints();
    console.println("X509Cert basicConstraints: " + basicConstraints);
    let subjectAltNames = x509Cert.getSubjectAltNames();
    console.println("X509Cert subjectAltNames: " + subjectAltNames.data);
    let issuerAltNames = x509Cert.getIssuerAltNames();
    console.println("X509Cert issuerAltNames: " + issuerAltNames.data);
    let crlDistributionPoint = x509Cert.getCRLDistributionPoint();
    console.println("X509Cert crlDistributionPoint: " + crlDistributionPoint.data);
  } catch (err: BusinessError) {
    console.println(`[error] cert data: ${err.code} ${err.message}`);
  }
}

function testX509CertGetItem() {
  try {
    let x509Cert = createX509Cert(new Uint8Array(certDataDER), cert.EncodingFormat.FORMAT_DER);
    let tbs = x509Cert.getItem(cert.CertItemType.CERT_ITEM_TYPE_TBS);
    console.println("X509Cert tbs: " + utils.uint8ArrayToHexStr(tbs.data));
    let pubKey = x509Cert.getItem(cert.CertItemType.CERT_ITEM_TYPE_PUBLIC_KEY);
    console.println("X509Cert pubKey: " + utils.uint8ArrayToHexStr(pubKey.data));
    let issuerUniqueId = x509Cert.getItem(cert.CertItemType.CERT_ITEM_TYPE_ISSUER_UNIQUE_ID);
    console.println("X509Cert issuerUniqueId: " + utils.uint8ArrayToHexStr(issuerUniqueId.data));
    let subjectUniqueId = x509Cert.getItem(cert.CertItemType.CERT_ITEM_TYPE_SUBJECT_UNIQUE_ID);
    console.println("X509Cert subjectUniqueId: " + utils.uint8ArrayToHexStr(subjectUniqueId.data));
    let extensions = x509Cert.getItem(cert.CertItemType.CERT_ITEM_TYPE_EXTENSIONS);
    console.println("X509Cert extensions: " + utils.uint8ArrayToHexStr(extensions.data));
  } catch (err: BusinessError) {
    console.println(`[error] getItem: ${err.code} ${err.message}`);
  }
}

function testX509CertMatch() {
  try {
    const param: cert.X509CertMatchParameters = {};
    let x509Cert = createX509Cert();
    let match = x509Cert.match(param);
    console.println("X509Cert match: " + (match ? "success" : "failed"));
  } catch (err: BusinessError) {
    console.println(`[error] match: ${err.code} ${err.message}`);
  }
}

function testX509CertToString() {
  try {
    let x509Cert = createX509Cert();
    let str = x509Cert.toString();
    console.println("X509Cert toString success");
  } catch (err: BusinessError) {
    console.println(`[error] toString: ${err.code} ${err.message}`);
  }
}

function testX509CertHashCode() {
  try {
    let x509Cert = createX509Cert();
    let hashCode = x509Cert.hashCode();
    console.println("X509Cert hashCode: " + hashCode);
  } catch (err: BusinessError) {
    console.println(`[error] hashCode: ${err.code} ${err.message}`);
  }
}

function testX509CertGetObject() {
  try {
    let x509Cert = createX509Cert();
    let issuer = x509Cert.getIssuerX500DistinguishedName();
    console.println("X509Cert getIssuerX500DistinguishedName success");
    let subject = x509Cert.getSubjectX500DistinguishedName();
    console.println("X509Cert getSubjectX500DistinguishedName success");
    let extensions = x509Cert.getExtensionsObject();
    console.println("X509Cert getExtensionsObject success");
  } catch (err: BusinessError) {
    console.println(`[error] getObject: ${err.code} ${err.message}`);
  }
}

export function testX509Cert() {
  console.println(">>>>>>>>>>>>>>>>>>>> X509CertAsync");
  testX509CertAsync();
  console.println(">>>>>>>>>>>>>>>>>>>> X509CertVerify");
  testX509CertVerify();
  console.println(">>>>>>>>>>>>>>>>>>>> X509CertCheckValidityWithDate");
  testX509CertCheckValidityWithDate();
  console.println(">>>>>>>>>>>>>>>>>>>> X509CertGetCertData");
  testX509CertGetCertData();
  console.println(">>>>>>>>>>>>>>>>>>>> X509CertGetCertData2");
  testX509CertGetCertData2();
  console.println(">>>>>>>>>>>>>>>>>>>> X509CertGetItem");
  testX509CertGetItem();
  console.println(">>>>>>>>>>>>>>>>>>>> X509CertMatch");
  testX509CertMatch();
  console.println(">>>>>>>>>>>>>>>>>>>> X509CertToString");
  testX509CertToString();
  console.println(">>>>>>>>>>>>>>>>>>>> X509CertHashCode");
  testX509CertHashCode();
  console.println(">>>>>>>>>>>>>>>>>>>> X509CertGetObject");
  testX509CertGetObject();
}
