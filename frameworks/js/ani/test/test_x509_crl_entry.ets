/*
 * Copyright (c) 2025-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { BusinessError } from "@ohos.base";
import cert from "@ohos.security.cert";
import utils from "./test_utils";

let crlData = '-----BEGIN X509 CRL-----\n' +
  'MIHzMF4CAQMwDQYJKoZIhvcNAQEEBQAwFTETMBEGA1UEAxMKQ1JMIGlzc3VlchcN\n' +
  'MTcwODA3MTExOTU1WhcNMzIxMjE0MDA1MzIwWjAVMBMCAgPoFw0zMjEyMTQwMDUz\n' +
  'MjBaMA0GCSqGSIb3DQEBBAUAA4GBACEPHhlaCTWA42ykeaOyR0SGQIHIOUR3gcDH\n' +
  'J1LaNwiL+gDxI9rMQmlhsUGJmPIPdRs9uYyI+f854lsWYisD2PUEpn3DbEvzwYeQ\n' +
  '5SqQoPDoM+YfZZa23hoTLsu52toXobP74sf/9K501p/+8hm4ROMLBoRT86GQKY6g\n' +
  'eavsH0Q3\n' +
  '-----END X509 CRL-----\n'

let encodingBlob: cert.EncodingBlob = {
  data: utils.stringToUint8Array(crlData),
  encodingFormat: cert.EncodingFormat.FORMAT_PEM
};

function testgetEncoded() {
  try {
    let x509CrlEntry = await cert.createX509CRL(encodingBlob);
    let serialNumber = BigInt(1000);
    let crlEntry = x509CrlEntry.getRevokedCert(serialNumber);
    let encoded = crlEntry.getEncoded();
    console.println('getEncoded success: ' + JSON.stringify(encoded));
  } catch (err: BusinessError) {
    console.println("testX509CrlEntryAsync failed, errCode: " + err.code + ", errMsg: " + err.message);
  }
}

function testgetSerialNumber() {
  try {
    let x509CrlEntry = await cert.createX509CRL(encodingBlob);
    let serialNumber = BigInt(1000);
    let crlEntry = x509CrlEntry.getRevokedCert(serialNumber);
    let serialNumber1 = crlEntry.getSerialNumber();
    console.println('getSerialNumber success: ' + JSON.stringify(serialNumber1));
  } catch (err: BusinessError) {
    console.println("testX509CrlEntryAsync failed, errCode: " + err.code + ", errMsg: " + err.message);
  }
}

function testgetCertIssuer() {
  try {
    let x509CrlEntry = await cert.createX509CRL(encodingBlob);
    let serialNumber = BigInt(1000);
    let crlEntry = x509CrlEntry.getRevokedCert(serialNumber);
    let certIssuer = crlEntry.getCertIssuer();
    console.println('getCertIssuer success: ' + JSON.stringify(certIssuer));
  } catch (err: BusinessError) {
    console.println("testX509CrlEntryAsync failed, errCode: " + err.code + ", errMsg: " + err.message);
  }
}

function testgetRevocationDate() {
  try {
    let x509CrlEntry = await cert.createX509CRL(encodingBlob);
    let serialNumber = BigInt(1000);
    let crlEntry = x509CrlEntry.getRevokedCert(serialNumber);
    let revocationDate = crlEntry.getRevocationDate();
    console.println('getRevocationDate success: ' + JSON.stringify(revocationDate));
  } catch (err: BusinessError) {
    console.println("testX509CrlEntryAsync failed, errCode: " + err.code + ", errMsg: " + err.message);
  }
}

function testgetExtensions() {
  let crlData1 = '-----BEGIN X509 CRL-----\n' +
  'MIIBjjB4AgEBMA0GCSqGSIb3DQEBCwUAMBIxEDAOBgNVBAMMB1Jvb3QgQ0EXDTI0\n' +
  'MDMxOTAyMDQwN1oXDTI0MDQxODAyMDQwN1owIjAgAgEEFw0yNDAzMTkwMjA0MDZa\n' +
  'MAwwCgYDVR0VBAMKAQGgDjAMMAoGA1UdFAQDAgEAMA0GCSqGSIb3DQEBCwUAA4IB\n' +
  'AQCbjvmHxC8dW6WCS/ga73kx2b7f8I/2eVuDYyReuBiGWeJ9vDmGqimJ9VwOk+ph\n' +
  'LvG/2Zvh9I8qXxnOWeseA2C0bEshJGvXpquIjm00OUyLlK6jdfRbhXT8OyvDjqZs\n' +
  'e1IsMV7Zo11SUc8nR2d0QQ7EVDCN/XFKPsmoK7PhJnRh5gc8W3FKQ6b8H9kdjgTa\n' +
  'KQUap1OIDReVsjPBmRAbwMMLtbrAMllF7E6x7uHgHTGaK1ZPJDtsnCJ45ur3mk/o\n' +
  'HAJFwHNjNDltiEfvMSs76/X0cwitpeW4dFk6c3QtqhxJrHDD4gl8di+xHOyHXpzX\n' +
  '+i2osvdPWRia0dJCL1PCA14k\n' +
  '-----END X509 CRL-----\n';

let encodingBlob1: cert.EncodingBlob = {
  data: utils.stringToUint8Array(crlData1),
  encodingFormat: cert.EncodingFormat.FORMAT_PEM
};
  try {
    let x509CrlEntry = await cert.createX509CRL(encodingBlob1);
    let serialNumber = BigInt(4);
    let crlEntry = x509CrlEntry.getRevokedCert(serialNumber);
    let extensions = crlEntry.getExtensions();
    console.println('getExtensions success: ' + JSON.stringify(extensions));
  } catch (err: BusinessError) {
    console.println("testX509CrlEntryAsync failed, errCode: " + err.code + ", errMsg: " + err.message);
  }
}

function testhasExtensions() {
  try {
    let x509CrlEntry = await cert.createX509CRL(encodingBlob);
    let serialNumber = BigInt(1000);
    let crlEntry = x509CrlEntry.getRevokedCert(serialNumber);
    let hasExtensions = crlEntry.hasExtensions();
    console.println('hasExtensions success: ' + JSON.stringify(hasExtensions));
  } catch (err: BusinessError) {
    console.println("testX509CrlEntryAsync failed, errCode: " + err.code + ", errMsg: " + err.message);
  }
}

function testgetCertIssuerX500DistinguishedName() {
  try {
    let x509CrlEntry = await cert.createX509CRL(encodingBlob);
    let serialNumber = BigInt(1000);
    let crlEntry = x509CrlEntry.getRevokedCert(serialNumber);
    let certIssuerX500DistinguishedName = crlEntry.getCertIssuerX500DistinguishedName();
    console.println('getCertIssuerX500DistinguishedName success: ' + JSON.stringify(certIssuerX500DistinguishedName));
  } catch (err: BusinessError) {
    console.println("testX509CrlEntryAsync failed, errCode: " + err.code + ", errMsg: " + err.message);
  }
}

function testToString() {
  try {
    let x509CrlEntry = await cert.createX509CRL(encodingBlob);
    let serialNumber = BigInt(1000);
    let crlEntry = x509CrlEntry.getRevokedCert(serialNumber);
    let string = crlEntry.toString();
    console.println('toString success: ' + JSON.stringify(string));
  } catch (err: BusinessError) {
    console.println("testX509CrlEntryAsync failed, errCode: " + err.code + ", errMsg: " + err.message);
  }
}

function testHashCode() {
  try {
    let x509CrlEntry = await cert.createX509CRL(encodingBlob);
    let serialNumber = BigInt(1000);
    let crlEntry = x509CrlEntry.getRevokedCert(serialNumber);
    let hashCode = crlEntry.hashCode();
    console.println('hashCode success: ' + JSON.stringify(hashCode));
  } catch (err: BusinessError) {
    console.println("testX509CrlEntryAsync failed, errCode: " + err.code + ", errMsg: " + err.message);
  }
}

function testgetExtensionObj() {
  let crlData2 = '-----BEGIN X509 CRL-----\n' +
  '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\n' +
  'BsQoO8O2EVpJ54fxKMCSDOkJf1hNCxi3eQ==\n' +
  '-----END X509 CRL-----\n';

let encodingBlob2: cert.EncodingBlob = {
  data: utils.stringToUint8Array(crlData2),
  encodingFormat: cert.EncodingFormat.FORMAT_PEM
};
  try {
    let x509Crl = await cert.createX509CRL(encodingBlob2);
    let serialNumber = BigInt('14091103387070223745671018446433705560');
    let x509CrlEntry = x509Crl.getRevokedCert(serialNumber);
    let extensionObj = x509CrlEntry.getExtensionsObject();
    console.println('getExtensionObj success');
  } catch (err: BusinessError) {
    console.println("testX509CrlEntryAsync failed, errCode: " + err.code + ", errMsg: " + err.message);
  }
}

export function testX509CrlEntry() {
  console.println(">>>>>>>>>>>>>>>>>>>> X509CrlEntryAsync");
  testgetEncoded();
  console.println(">>>>>>>>>>>>>>>>>>>> testGetSerialNumber");
  testgetSerialNumber();
  console.println(">>>>>>>>>>>>>>>>>>>> testgetCertIssuer");
  testgetCertIssuer();
  console.println(">>>>>>>>>>>>>>>>>>>> testgetRevocationDate");
  testgetRevocationDate();
  console.println(">>>>>>>>>>>>>>>>>>>> testgetExtensions");
  testgetExtensions();
  console.println(">>>>>>>>>>>>>>>>>>>> testhasExtensions");
  testhasExtensions();
  console.println(">>>>>>>>>>>>>>>>>>>> testgetCertIssuerX500DistinguishedName");
  testgetCertIssuerX500DistinguishedName();
  console.println(">>>>>>>>>>>>>>>>>>>> testToString");
  testToString();
  console.println(">>>>>>>>>>>>>>>>>>>> testHashCode");
  testHashCode();
  console.println(">>>>>>>>>>>>>>>>>>>> testgetExtensionObj");
  testgetExtensionObj();
}
